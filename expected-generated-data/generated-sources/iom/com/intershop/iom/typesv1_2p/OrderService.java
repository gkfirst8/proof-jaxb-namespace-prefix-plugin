package com.intershop.iom.typesv1_2p;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.0.3
 * 2023-11-22T11:23:04.700+01:00
 * Generated source version: 4.0.3
 *
 */
@WebServiceClient(name = "OrderService",
                  wsdlLocation = "file:/home/gkok/src/indi/proof-namespace-plugin/src/main/resources/OrderService-v1.2_1.wsdl",
                  targetNamespace = "http://v1_2.services.theberlinbakery.com/")
public class OrderService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://v1_2.services.theberlinbakery.com/", "OrderService");
    public final static QName OrderServicePort = new QName("http://v1_2.services.theberlinbakery.com/", "OrderServicePort");
    static {
        URL url = null;
        try {
            url = new URL("file:/home/gkok/src/indi/proof-namespace-plugin/src/main/resources/OrderService-v1.2_1.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(OrderService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/home/gkok/src/indi/proof-namespace-plugin/src/main/resources/OrderService-v1.2_1.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public OrderService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public OrderService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OrderService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public OrderService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public OrderService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public OrderService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns OrderServicePort
     */
    @WebEndpoint(name = "OrderServicePort")
    public OrderServicePort getOrderServicePort() {
        return super.getPort(OrderServicePort, OrderServicePort.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OrderServicePort
     */
    @WebEndpoint(name = "OrderServicePort")
    public OrderServicePort getOrderServicePort(WebServiceFeature... features) {
        return super.getPort(OrderServicePort, OrderServicePort.class, features);
    }

}
